#!/usr/bin/env bb

(ns table.width
  (:require clojure.java.shell clojure.java.io clojure.string))

(declare get-initial-widths max-width-per-field actual-width auto-resize-widths
         detect-terminal-width command-exists?)

(def ^:dynamic *width* (delay (or (detect-terminal-width) 200)))
; TODO: calculate border lengths from styles
; " | " and "-+-" are inner borders
(def inner-border-length 3)
; "+-" and "-+" are outer borders
(def outer-border-length 2)

(defn get-widths [all-rows]
  (-> all-rows get-initial-widths vec auto-resize-widths))

(defn auto-resize-widths [widths]
  (loop [new-widths [] widths widths field-count (count widths) max-width @*width*]
    (if (empty? widths)
      new-widths
      (let [width (first widths)
            width-per-field (max-width-per-field max-width field-count)
            new-width (if (< width width-per-field) width width-per-field)]
        (recur
          (conj new-widths new-width)
          (rest widths)
          (- field-count 1)
          (- max-width (+ new-width inner-border-length)))))))

(defn get-initial-widths [all-rows]
  (map
    (fn [idx]
      (apply max (map #(count (str (nth % idx))) all-rows)))
    (range (count (first all-rows)))))

(defn- max-width-per-field [current-width field-count]
  (quot (actual-width current-width field-count) field-count))

; think of inner-borders as interposed between fields to understand why
; it's one less than the number of fields
(defn- actual-width [current-width field-count]
  (- current-width (+ (* 2 outer-border-length) (* (dec field-count) inner-border-length))))

(defn ensure-valid-width [arg]
  (if (integer? arg)
    (if (> arg 0) arg 100)
    arg))

(defn- stty-detect []
  (->> (clojure.java.shell/sh "/bin/sh" "-c" "stty -a < /dev/tty")
       :out
       (re-find #" (\d+) columns")
       vec
       second
       ((fn  [_ two] (if two (Integer. two))) :not-used)))

; since Java doesn't recognize COLUMNS by default you need to `export COLUMNS` for it
; be recognized
(defn- detect-terminal-width []
  (ensure-valid-width
   (cond
    (System/getenv "COLUMNS") (Integer. (System/getenv "COLUMNS"))
    (command-exists? "stty") (stty-detect))))

(defn- command-exists?
  "Determines if command exists in $PATH"
  [cmd]
  (some
    #(-> (str % "/" cmd) clojure.java.io/file .isFile)
    (-> (System/getenv "PATH") (clojure.string/split #":"))))
(ns table.core
  (:require table.width)
  (:use [clojure.string :only [join]] ))

(declare style-for format-cell render-rows-with-fields escape-newline render-rows table-str)

(def ^:dynamic *style* :plain)
(def ^:private walls ["| " " | " " |"])
(def ^:private styles
  {
   :plain {:top ["+-" "-+-" "-+"], :middle ["+-" "-+-" "-+"] :bottom ["+-" "-+-" "-+"]
           :dash "-" :header-walls walls :body-walls walls }
   :org {:top ["|-" "-+-" "-|"], :middle ["|-" "-+-" "-|"] :bottom ["|-" "-+-" "-|"]
         :dash "-" :header-walls walls :body-walls walls }
   :unicode {:top ["┌─" "─┬─" "─┐"] :middle ["├─" "─┼─" "─┤"] :bottom ["└─" "─┴─" "─┘"]
             :dash "─" :header-walls ["│ " " │ " " │"] :body-walls ["│ " " ╎ " " │"] }
   :unicode-3d {:top ["┌─" "─┬─" "─╖"] :middle ["├─" "─┼─" "─╢"] :bottom ["╘═" "═╧═" "═╝"]
                :top-dash "─" :dash "─" :bottom-dash "═"
                :header-walls ["│ " " │ " " ║"] :body-walls ["│ " " │ " " ║"] }
   :github-markdown {:top ["" "" ""] :middle ["|-" " | " "-|"] :bottom ["" "" ""]
                     :top-dash "" :dash "-" :bottom-dash "" :header-walls walls :body-walls walls }
   })

(defn table
   "Generates an ascii table for almost any input that fits in your terminal.
   Multiple table styles are supported.

   Options:

   * :sort   When set with field name, sorts by field name. When set to true
             sorts by first column. Default is false.
   * :fields An optional vector of fields used to control ordering of fields.
             Only works with rows that are maps.
   * :desc   When set to true, displays row count after table. Default is nil.
   * :style  Sets table style. Available styles are :plain, :org, :unicode and
             :github-markdown. Default is :plain."
  [& args]
  (println (apply table-str args)))

(defn table-str
  "Same options as table but returns table as a string"
  [ args & {:keys [style] :or {style :plain} :as options}]
  (binding [*style* (if (map? style) style (style styles))]
    (apply str (join "\n" (render-rows args (if (map? options) options {}))))))

(defn- generate-rows-and-fields
  "Returns rows and fields. Rows are a vector of vectors containing string cell values."
  [table options]
  (let [
       top-level-vec (not (coll? (first table)))
       fields (cond
               top-level-vec [:value]
               (map? (first table)) (or (:fields options)
                                        (distinct (vec (flatten (map keys table)))))
               (map? table) [:key :value]
               :else (first table))
       rows (cond
             top-level-vec (map #(vector %) table)
             (map? (first table)) (map #(map (fn [k] (get % k)) fields) table)
             (map? table) table
             :else (rest table))
       rows (map (fn [row] (map #(if (nil? %) "" (str %)) row)) rows)
       sort-opt (options :sort)
       rows (if (and sort-opt (some #{sort-opt} (conj fields true)))
              (sort-by
               #(nth % (if (true? sort-opt) 0 (.indexOf fields sort-opt)))
               rows) rows)
        rows (->> rows (map vec) (map (fn [row] (map escape-newline row))))]
    [rows fields]))

(defn- render-rows
  "Generates a list of formatted string rows given almost any input"
  [table options]
  (let [[rows fields] (generate-rows-and-fields table options)
        rendered-rows (render-rows-with-fields rows fields options)]
    (if (:desc options)
      (concat rendered-rows [(format "%s rows in set" (count rows))])
      rendered-rows)))

(defn- render-rows-with-fields [rows fields options]
  (let [
    headers (map #(if (keyword? %) (name %) (str %)) fields)
    widths (table.width/get-widths (cons headers rows))
    fmt-row (fn [row]
              (map-indexed
                (fn [idx string] (format-cell string (nth widths idx)))
                row))
    wrap-row (fn [row strings] (let [[beg mid end] strings] (str beg (join mid row) end)))
    headers (fmt-row headers)
    border-for (fn [section dash]
                 (let [dash-key (if (style-for dash) dash :dash)]
                 (wrap-row
                   (map #(apply str (repeat
                                      (.length (str %))(style-for dash-key))) headers)
                   (style-for section))))
    header (wrap-row headers (style-for :header-walls))
    body (map #(wrap-row (fmt-row %) (style-for :body-walls)) rows) ]

    (concat [(border-for :top :top-dash) header (border-for :middle :dash)]
            body [( border-for :bottom :bottom-dash)])))

(defn- escape-newline [string]
  (clojure.string/replace string (str \newline) (char-escape-string \newline)))

(defn- style-for [k] (k *style*))

(defn format-cell [string width]
  (if (zero? width)
    ""
    (format
      (str "%-" width "." width "s")
      (if (> (count string) width)
        (str (.substring string 0 (- width 3)) "...")
        string))))
(ns passman.clipboard
  (:require [babashka.process :refer [sh]]))

(defn copy [text]
  (-> (sh ["echo" text])
      (sh ["clip.exe"]) :out))

(comment
  (copy "hello there"))(ns passman.stash
  (:require [babashka.pods :as pods]))

(def ^{:doc "path to stash file"} stash-file-path
  (str (System/getenv "HOME") "/passman/passman.stash"))

(pods/load-pod 'rorokimdim/stash "0.3.1")

(require '[pod.rorokimdim.stash :as stash])

(defn stash-init
  "Initializes stash.
  If `stash-file-path` does not exist, it will be created."
  [password]
  (stash/init {"encryption-key" password
               "stash-path" stash-file-path
               "create-stash-if-missing" true}))

(defn stash-add
  "Adds a new node under a parent."
  [parent-id k v]
  (stash/add parent-id k v))

(defn stash-update
  "Updates a node given a node id"
  [nid v]
  (stash/update nid v))

(defn stash-delete
  "Deletes a node given a node id"
  [nid]
  (stash/delete nid))

(defn stash-nodes
  "Gets all nodes stored in stash.
  If a parent-node-id is provided, only nodes with that parent-id are returned."
  ([] (stash-nodes 0))
  ([parent-id] (stash/nodes parent-id)))

(defn find-password-node [url username]
  (let [nodes (stash-nodes)
        key (str url username)
        found-node (first (filter (fn [n]
                                    (= (:key n) key)) nodes))]
    found-node))

(defn find-password [url username]
  (let [found-node (find-password-node url username)
        password (:value found-node)]
    password))

(defn insert-password! [url username password]
  (stash-add 0 (str url username) password))

(defn update-password!
  "Updates a node using url and username"
  [url username password]
  (let [found-node (find-password-node url username)
        nid (:id found-node)]
    (stash-update nid password)))

(defn delete-password!
  "Deletes a node using url and username"
  [url username]
  (let [found-node (find-password-node url username)
        nid (:id found-node)]
    (stash-delete nid)))

(comment

  (find-password "facebook.com" "testing@test.com")

  (stash-init "password")

  (insert-password! "facebook.com" "caleb@test.com" "secret")

  (stash-nodes))
(ns passman.password)

(defn generate-password [length]
  (let [available-chars (reduce (fn [acc val]
                                  (str acc (char val))) "" (range 33 123))]
    (loop [password ""]
      (if (= (count password) length)
        password
        (recur (str password (rand-nth available-chars)))))))(ns passman.db
  (:require [babashka.pods :as pods]
            ;; [honey.sql :as sql]
            ;; [honey.sql.helpers :as h]
            [babashka.fs :as fs]))

(pods/load-pod 'org.babashka/go-sqlite3 "0.1.0")

(require '[pod.babashka.go-sqlite3 :as sqlite])

(def dbname (str (System/getenv "HOME") "/passman/passman.db"))

(defn create-db! []
  (when (not (fs/exists? dbname))
    (sqlite/execute! dbname
                    ;;  (-> (h/create-table :passwords)
                    ;;      (h/with-columns [[:url :text]
                    ;;                       [:username :text]
                    ;;                       [[:unique nil :url :username]]])
                    ;;      (sql/format))
                     ["CREATE TABLE passwords (url TEXT, username TEXT, UNIQUE(url, username))"])))

(defn insert-password! [url username]
  (sqlite/execute! dbname
                  ;;  (-> (h/insert-into :passwords)
                  ;;      (h/columns :url :username)
                  ;;      (h/values [[url username]])
                  ;;      (sql/format))
                   ["INSERT INTO passwords (url, username) VALUES (?, ?)" url username]))

(defn delete-password! [url username]
  (sqlite/execute! dbname
                  ;;  (-> (h/delete-from :passwords)
                  ;;      (h/where [:= :url url]
                  ;;               [:= :username username])
                  ;;      (sql/format))
                   ["DELETE FROM passwords WHERE (url = ?) AND (username = ?)" url username]))

(defn list-passwords []
  (sqlite/query dbname
                ;; (-> (h/select :url :username)
                ;;     (h/from :passwords)
                ;;     (sql/format))
                ["SELECT url, username FROM passwords"]))

(create-db!)

(comment
  (list-passwords)

  (insert-password! "facebook.com" "caleb@test.com")

  ;; (-> (h/insert-into :passwords)
  ;;     (h/columns :url :username)
  ;;     (h/values [["facebook.com" "caleb@test.com"]])
  ;;     (sql/format))

  ;; (-> (h/delete-from :passwords)
  ;;     (h/where [:= :url "facebook.com"]
  ;;              [:= :username "caleb@test.com"])
  ;;     (sql/format))

  ;; (sqlite/query dbname
  ;;               (-> (h/select :url :username)
  ;;                   (h/from :passwords)
  ;;                   (sql/format)))
  )(ns passman.app
  (:require [clojure.tools.cli :refer [parse-opts]]
            [passman.db :as db]
            [passman.password :refer [generate-password]]
            [passman.stash :as stash]
            [passman.clipboard :refer [copy]]
            [clojure.string :as str]
            [table.core :as t]))

(def cli-options
  [["-l" "--length Length" "Password length"
    :default 40
    :parse-fn #(Integer/parseInt %)
    :validate [#(< 0 % 0x10000) "Must be a number between 0 and 65536"]]
   ["-g" "--generate" "Generate new password"]
   [nil "--list"]
   ["-h" "--help" "Show help"]
   ["-u" "--usage" "Show usage"]
   ["-d" "--delete"]
   ["-p" "--password Password" "Manual password to add with given <url> and <username>."]
   ["-a" "--add" "Adds a manually provided password to the database."]
   ["-f" "--force-update" "Forces Add and Generate to overwrite existing."]])

(def usage
  (->> ["Passman CLI Password Manager v. 0.0.2-b"
        ""
        "Usage: passman <url> <username>"
        ""
        "Default behavior: Looks up password for the given <url> and <username>, copies to clipboard."
        ""
        "Available options:"
        "  [-h | --help] | [-u | --usage]        Show this help text. Ignores <url> and <username>."
        "  [-g | --generate]                     Generate a new password for given <url> and <username."
        "                                          Copies generated password to clipboard and saves to database."
        "  [-l <length> | --length <length>]     Specify length of password generated with [-g | --generate]. Defaults to 40."
        "  [-p <pass> | --password <pass>]       Provides a manual password to be stored with the given <url> and <username>."
        "                                          Ignored if not used with [-a | -add] or [-a! | -add!]."
        "  [-a | --add]                          Saves <pass> as a new password. Panics if <url> <username> combo already exists."
        "  [-d | --delete]                       Deletes the provided <url> and <username> combo. Must be passed with [-f | --force-update]."
        "  [-f | --force-update]                 Forces [-a | --add] and [-g | --generate] to overwrite existing <url> and <username> combo."
        "  [--list]                              Print table of all urls and usernames with stored passwords."
        "                                          Runs only if <url> and <username> are not supplied."]
       (str/join \newline)))

(defn password-input []
  (println "Enter your master key:")
  (String. (.readPassword (System/console))))

(defn confirm-overwrite []
  (print "Do you want to overwrite? [y/n] ") (flush)
  (let [input (str/lower-case (String. (.readLine (System/console))))]
    (case input "y" true false)))

(defn confirm-delete []
  (print "Are you sure you want to delete? (This cannot be undone) [yes/no] ") (flush)
  (let [input (str/lower-case (String. (.readLine (System/console))))]
    (case input "yes" true false)))

(defn delete-pass [url username]
  (stash/stash-init (password-input))
  (println (str "!!! DELETING: URL " url " and Username " username " !!!"))
  (let [confirm (confirm-delete)]
    (if confirm
      (do (db/delete-password! url username)
          (stash/delete-password! url username)
          (println "Deleted password"))
      (println "Canceled"))))

(defn add-pass [url username password overwrite]
  (stash/stash-init (password-input))
  (let [existing-pass (stash/find-password url username)]
    (if existing-pass
      (do (println "This url/username combo already exists!")
          (when overwrite
            (let [confirm (confirm-overwrite)]
              (if confirm
                (do (stash/update-password! url username password)
                    (println "Updated password, copied to clipboard")
                    (copy password))
                (println "Canceled")))))
      (do (db/insert-password! url username)
          (stash/insert-password! url username password)
          (println "Added password, copied to clipboard")
          (copy password)))))

(defn generate-new-pass [url username length overwrite]
  (let [password (generate-password length)]
    (add-pass url username password overwrite)))

(defn -main [& args]
  (let [parsed-options (parse-opts args cli-options)
        options (:options parsed-options)
        [url username] (:arguments parsed-options)]
    ;; (println options) ;; Uncomment to debug options
    (cond
      (or (:help options) (:usage options)) (println usage)
      (:delete options) (if (:force-update options)
                          (if (and url username)
                            (delete-pass url username)
                            (println "You must specify a url/username combo to delete."))
                          (println "You must pass [-f | --force-update] to delete a url/username combo."))
      (:generate options) (generate-new-pass url username (:length options) (:force-update options))
      (:add options) (if (:password options)
                       (add-pass url username (:password options) (:force-update options))
                       (println "Provide a [-p <pass> | --password <pass>] argument with [-a | --add]"))
      (and url username) (do
                           (stash/stash-init (password-input))
                           (let [password (stash/find-password url username)]
                             (if password
                               (do (copy password)
                                   (println "Password copied to clipboard"))
                               (println "Password not found for that url/username combo."))))
      (:list options) (t/table (db/list-passwords))
      :else (println usage))))

(comment
  (-main))
(ns user (:require [passman.app])) (apply passman.app/-main *command-line-args*)
